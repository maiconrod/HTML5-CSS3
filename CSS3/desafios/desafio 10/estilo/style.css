@charset "UTF-8";
/*
coloco o @charset "UTF-8" para fins de compatibilidade de caracteres com o HTML e s CSS.
*/

@import url('https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Italianno&display=swap');
/*
uso o @import para importar uma fonte do Google Fonts sem precisar baixá-la na minha máquina.
*/

@font-face {
    font-family: 'Android';
    src: url('../fontes/idroid.otf') format('opentype');
    font-weight: normal;
/*
Uso o @font-face para inserir uma fonte baixada na minha máquina, com o arquivo salvo na mesma pasta mãe do meu arquivo HTML.
*/
}

:root {
    --cor0: #e5ebd6;
    --cor1: #83e1ad;
    --cor2: #3ddc84;
    --cor3: #2fa866;
    --cor4: #1a5c37;
    --cor5: #063d1e;

    --fonte-padrao: Arial, Verdana, Helvetica, sans-serif;
    --fonte-destaque: 'Bebas Neue', sans-serif;
    --fonte-android: 'Android', sans-serif;

/*
uso o :root para criar definições de parâmetros que vou usar com frequência no meu código, renomeando-os para ficar mais fácil de usar. Isso facilita principalmente na hora que eu tiver que fazer alguma alteração no meu site, de fontes ou cores, por exemplo, aí eu só mudo o código da cor ou o nome da fonte ali em cima e altera automaticamente no meu código.
*/
}

* {
    margin: 0px;
    padding: 0px;
/*
uso o * para selecionar todos os elementos do meu HTML de uma só vez. Nesse caso zerei todas as margens e os paddings para meu conteúdo perder a margem padrão e eu poder configurar melhor.
*/
}

body {
    background-color: var(--cor0);
    font-family: var(--fonte-padrao);
}

a.externo::after {
    content: '\00A0\1F517';
/*
Nesse caso eu vou criar uma classe com nome 'externo'no HTML, e dar esse comando para que depois de todo item da classe externo apareça o símbolo de link. E aí eu coloco o código do emoji ali entre aspas simples. E o 00A0 é para dar um espaço entre o link e o símbolo.
*/
}

header {
    background-image: linear-gradient(to bottom, var(--cor3), var(--cor5));
    min-height: 150px;
    text-align: center;
    padding: 40px;
}

header > h1 {
    color: white;
    font-family: var(--fonte-destaque);
    font-weight: normal;
    margin-bottom: 20px;
    font-size: 3em;
    text-shadow: 2px 2px 0px rgba(0, 0, 0, 0.546);
}

header > p {
    font-family: var(--fonte-padrao);
    font-size: 1.2em;
    color: white;
    max-width: 500px;
    padding-right: 10px;
    padding-left: 10px;
    margin: auto;
    padding-bottom: 50px;
    text-shadow: 2px 2px 0px rgba(0, 0, 0, 0.546);
}

nav {
    background-color: var(--cor5);
    padding: 10px;
    box-shadow: 0px 7px 7px rgba(0, 0, 0, 0.198);
}

nav > a {
    color: var(--cor1);
    padding: 10px;
    border-radius: 5px;
    text-decoration: none;
    font-weight: bold;
    transition-duration: .5s;
/*
Transition-duration é para quando mexer o mouse por cima do efeito, ele vai levar o tempo que eu detemrinar ali de transição.
*/
}

nav > a:hover {
    background-color: var(--cor1);
    color: var(--cor5);
/*
Lembrando que o :HOVER é a ação que quero quando vou passar o mouse em cima do link, por isso eu coloco a:hover.
*/
}

main {
    min-width: 300px;
    max-width: 1000px;
    margin: auto;
    background-color: white;
    margin-bottom: 30px;
    padding: 20px;
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 10px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.428);
}

main h1 {
    color: var(--cor5);
    font-family: var(--fonte-android);
    font-weight: normal;
    font-size: 1.8em;
}

main h2 {
    color: var(--cor5);
    font-family: var(--fonte-android);
    font-size: 1.3em;
    font-weight: normal;
    background-image: linear-gradient(to right, var(--cor1), transparent);
    text-indent: 8px;
}

main p {
    margin: 15px 0px 15px 0px;
    text-align: justify;
    text-indent: 30px;
    font-size: 1em;
    line-height: 2em;
/*
Eu uso 'main p' e não 'man > p'porque se eu colocar o símbolo > aqui, a alteração que eu fizer vai atingir até o p que estiver dentro de outras tags que estão no main. E colocando sem o >, as alterações só serão feitas no p que estão diretamente dentro do main.

o line-height é para configurar o espaçamento entre linhas.
*/
}

main strong {
    color: var(--cor4);
    font-weight: bold;
    padding: 2px 6px;
}

main a {
    text-decoration: none;
    font-weight: bold;
    color: var(--cor5);
    background-color: var(--cor1);
    padding: 2px 6px;
}

main a:hover {
    text-decoration: underline;
    color: var(--cor4);
}

main img {
    width: 100%;
/*
Uso esse comando na imagem para que ela sempre se adapte independentemente do tamanho da tela, ocupando sempre 100% do seu espaço, diminuindo ou aumentando, sem ficar quebrada para os lados.
*/
}
main img.pequena {
    max-width: 350px;
    display: block;
    margin: auto;
/*
Nesse caso, quero que a imagem tenha o tamanho máximo de 350px, e como ela não é um bloco, colocar apenas o margin: auto NÃO adiantaria. Por isso preciso usar o display:block.
*/
}

div.video {
    background-color: var(--cor5);
    margin: 0px -20px 30px -20px;
    padding: 20px;
    padding-bottom: 58%;
    position: relative;
/*
Aqui eu configurei o fundo verde que aparece atrás do vídeo. Importante deixar o fundo relativo e o vídeo absoluto para que eu possa alterar as medida e eles se adaptarem aos tamanhos de telas.
*/
}

div.video > iframe {
    position: absolute;
    top: 5%;
    left: 5%;
    width: 90%;
    height: 90%;
/*
Eu coloco a position: absolute para que eu possa modificar aquelas medidas ali do vídeo. Assim ele vai ficar se ajustando ao tamanho da tela.
*/
}

aside {
    background-color: var(--cor1);
    padding: 10px;
    border-radius: 10px;
    box-shadow: 3px 3px 3px rgba(0, 0, 0, 0.281);
}

aside > h3 {
    background-color: var(--cor4);
    color: white;
    padding: 10px;
    margin: -10px -10px 0px -10px;
    border-radius: 10px 10px 0px 0px;

}

aside > ul {
    list-style-position: inside;
    columns: 2;
    list-style-type: '\2714\00A0\00A0';

/*
O list-style-type serve para alterar o emogi de marcador da lista. Aí e coloco o código entre aspas simples. Além disso, o código 00A0 serve para dar espa;o entre a escrita e o emoji. Posso usar esse código mais de uma vez,
*/
}

footer {
    background-color: var(--cor5);
    color: white;
    text-align: center;
    font-size: 0.8em;
    padding: 5px;
}

footer a {
    color: white;
    font-weight: bolder;
    text-decoration: none;
}

footer a:hover {
    text-decoration: underline;
    color: var(--cor1);
}
